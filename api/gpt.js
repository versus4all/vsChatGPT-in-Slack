export default async function handler(req, res) {
  if (req.method === 'POST') {
    const prompt = req.body.text;
    const userId = req.body.user_id;
    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

    const allowedUserId = "U02982R3A0J"; // ‚úÖ —Ç–≤–æ–π ID

    if (userId !== allowedUserId) {
      return res.status(200).send("üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.");
    }

    if (!prompt) {
      return res.status(200).send("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/gpt`.");
    }

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: "gpt-4o",
          messages: [{ role: "user", content: prompt }],
        }),
      });

      const data = await response.json();
      const answer = data.choices?.[0]?.message?.content;

      if (!answer) return res.status(200).send("‚ö†Ô∏è GPT –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç–∞.");
      return res.status(200).send(answer);
    } catch (err) {
      console.error("GPT error:", err);
      return res.status(200).send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT.");
    }
  }

  res.status(405).send("Method Not Allowed");
}
