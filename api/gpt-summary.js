const { createSummaryJob } = require('../lib/summary');

module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    return res.status(405).send('Method Not Allowed');
  }

  try {
    const body = req.body;

    const userId = body.user_id;
    const threadTs = body.thread_ts || body.ts || 'default';
    const delayMs = 30000; // 30 seconds

    console.log(`[GPT-SUMMARY] Received request from user=${userId}, threadTs=${threadTs}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–æ–∂–∏–¥–∞–Ω–∏–µ" –∏ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    const payload = {
      response_type: 'ephemeral',
      text: '‚è≥ Summary will be generated in 30 seconds‚Ä¶',
      blocks: [
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: '‚è≥ Summary will be generated in 30 seconds‚Ä¶',
          },
        },
        {
          type: 'actions',
          elements: [
            {
              type: 'button',
              text: {
                type: 'plain_text',
                text: '‚ùå Cancel summary',
              },
              action_id: 'cancel_summary',
              style: 'danger',
            },
          ],
        },
      ],
    };

    res.status(200).json(payload);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    await createSummaryJob({
      userId,
      threadTs,
      delayMs,
      callback: async () => {
        console.log(`[GPT-SUMMARY] Generating summary for user=${userId}, threadTs=${threadTs}`);

        // TODO: –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–≤–æ–π –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary
        // –ü—Ä–∏–º–µ—Ä:
        const summaryText = `üß† Summary for thread \`${threadTs}\` (user: ${userId})`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–∫—É
        await fetch('https://slack.com/api/chat.postMessage', {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${process.env.SLACK_BOT_TOKEN}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            channel: userId,
            text: summaryText,
          }),
        });

        console.log(`[GPT-SUMMARY] Summary sent to user=${userId}`);
      },
    });
  } catch (error) {
    console.error('[GPT-SUMMARY] Error:', error);
    res.status(500).send('Internal Server Error');
  }
};
