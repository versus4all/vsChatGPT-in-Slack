export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { type, challenge, event } = req.body;

    // ‚úÖ Slack verification
    if (type === 'url_verification') {
      return res.status(200).json({ challenge });
    }

    // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ @ChatGPT —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if (event?.type === 'app_mention') {
      const { text, user, channel, thread_ts } = event;

      // üîê –¢–æ–ª—å–∫–æ —Ç—ã (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–∏—à—å –≤—Å–µ–º)
      if (user !== "U02982R3A0J") {
        return res.status(200).end();
      }

      const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
      const SLACK_BOT_TOKEN = process.env.SLACK_BOT_TOKEN;

      // –£–¥–∞–ª–∏–º @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
      const cleaned = text.replace(/<@[^>]+>\s*/, '').trim();

      try {
        // –û—Ç–ø—Ä–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –≤ GPT
        const gptRes = await fetch("https://api.openai.com/v1/chat/completions", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${OPENAI_API_KEY}`,
          },
          body: JSON.stringify({
            model: "gpt-4o",
            messages: [
              {
                role: "system",
                content: "You are a helpful assistant in a Slack workspace. Provide clear, helpful, and professional responses.",
              },
              {
                role: "user",
                content: cleaned,
              },
            ],
          }),
        });

        const data = await gptRes.json();
        const answer = data.choices?.[0]?.message?.content || "‚ö†Ô∏è GPT returned no response.";

        // –û—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç—Ä–µ–¥
        await fetch("https://slack.com/api/chat.postMessage", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${SLACK_BOT_TOKEN}`,
          },
          body: JSON.stringify({
            channel,
            text: answer,
            thread_ts: thread_ts || event.ts,
          }),
        });

        return res.status(200).end();
      } catch (error) {
        console.error("App mention error:", error);
        return res.status(200).send("‚ö†Ô∏è Failed to handle @mention.");
      }
    }

    return res.status(200).end(); // –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
  }

  res.setHeader('Allow', 'POST');
  res.status(405).end('Method Not Allowed');
}
